{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\matta\\\\OneDrive\\\\Documentos\\\\GitHub\\\\react_game_tron\\\\src\\\\App.js\";\nimport React, { useEffect, useReducer } from 'react';\nimport Board from 'components/Board';\nimport Result from 'components/Result';\nimport Start from 'components/Start';\nimport { BOARD_SIZE, GAME_ENDED, GAME_PLAYING, GAME_READY, PLAYER_ONE, PLAYER_TWO, UNIT } from 'config/const';\nimport useInterval from 'hooks/useInterval';\nimport getCellKey from 'utils/getCellKey';\nimport getPlayableCells from 'utils/getPlayableCells';\nimport playerCanChangeToDirection from 'utils/playerCanChangeToDirection';\nimport sumCoordinates from 'utils/sumCoordinates';\nimport './App.css';\nconst players = [PLAYER_ONE, PLAYER_TWO];\nconst initialState = {\n  players,\n  playableCells: getPlayableCells(BOARD_SIZE, UNIT, players.map(player => getCellKey(player.position.x, player.position.y))),\n  gameStatus: GAME_READY\n};\n\nfunction updateGame(game, action) {\n  if (action.type === 'start') {\n    return { ...initialState,\n      gameStatus: GAME_PLAYING\n    };\n  }\n\n  if (action.type === 'restart') {\n    return { ...initialState,\n      gameStatus: GAME_READY\n    };\n  }\n\n  if (action.type === 'move') {\n    const newPlayers = game.players.map(player => ({ ...player,\n      position: sumCoordinates(player.position, player.direction)\n    }));\n    const newPlayersWithCollision = newPlayers.map(player => {\n      const myCellKey = getCellKey(player.position.x, player.position.y);\n      return { ...player,\n        hasDied: !game.playableCells.includes(myCellKey) || newPlayers.filter(p => p.id !== player.id).map(p => getCellKey(p.position.x, p.position.y)).includes(myCellKey)\n      };\n    });\n    const newOcupiedCells = game.players.map(player => getCellKey(player.position.x, player.position.y));\n    const playableCells = game.playableCells.filter(playableCell => {\n      return !newOcupiedCells.includes(playableCell);\n    });\n    return {\n      players: newPlayersWithCollision,\n      playableCells: playableCells,\n      gameStatus: newPlayersWithCollision.filter(player => player.hasDied).length === 0 ? GAME_PLAYING : GAME_ENDED\n    };\n  }\n\n  if (action.type === 'changeDirection') {\n    const newPlayers = game.players.map(player => ({ ...player,\n      direction: player.keys[action.key] && playerCanChangeToDirection(player.direction, player.keys[action.key]) ? player.keys[action.key] : player.direction\n    }));\n    return {\n      players: newPlayers,\n      playableCells: game.playableCells,\n      gameStatus: game.gameStatus\n    };\n  }\n}\n\nfunction App() {\n  let result = null;\n  const [game, gameDispatch] = useReducer(updateGame, initialState);\n  const players = game.players;\n  const diedPlayers = players.filter(player => player.hasDied);\n\n  if (diedPlayers.length > 0) {\n    console.log(diedPlayers);\n  }\n\n  useInterval(function () {\n    gameDispatch({\n      type: 'move'\n    });\n  }, game.gameStatus !== GAME_PLAYING ? null : 100);\n  useEffect(function () {\n    function handleKeyPress(event) {\n      const key = `${event.keyCode}`;\n\n      if (key === '13') {\n        if (game.gameStatus === GAME_READY) {\n          handleStart();\n        }\n\n        if (game.gameStatus === GAME_ENDED) {\n          handleRestart();\n        }\n      }\n\n      gameDispatch({\n        type: 'changeDirection',\n        key\n      });\n    }\n\n    document.addEventListener('keydown', handleKeyPress);\n    return function cleanUp() {\n      document.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [game.gameStatus]);\n\n  function handleStart() {\n    gameDispatch({\n      type: 'start'\n    });\n  }\n\n  function handleRestart() {\n    gameDispatch({\n      type: 'restart'\n    });\n  }\n\n  if (game.gameStatus === GAME_ENDED) {\n    const winningPlayers = game.players.filter(player => !player.hasDied);\n\n    if (winningPlayers.length === 0) {\n      result = 'Empate';\n    } else {\n      result = `Ganador: ${winningPlayers.map(player => `Jugador ${player.id}`).join(',')}`;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Board, {\n    players: game.players,\n    gameStatus: game.gameStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }), game.gameStatus === GAME_ENDED && /*#__PURE__*/React.createElement(Result, {\n    onClick: handleRestart,\n    result: result,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 42\n    }\n  }), game.gameStatus === GAME_READY && /*#__PURE__*/React.createElement(Start, {\n    onClick: handleStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 42\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/matta/OneDrive/Documentos/GitHub/react_game_tron/src/App.js"],"names":["React","useEffect","useReducer","Board","Result","Start","BOARD_SIZE","GAME_ENDED","GAME_PLAYING","GAME_READY","PLAYER_ONE","PLAYER_TWO","UNIT","useInterval","getCellKey","getPlayableCells","playerCanChangeToDirection","sumCoordinates","players","initialState","playableCells","map","player","position","x","y","gameStatus","updateGame","game","action","type","newPlayers","direction","newPlayersWithCollision","myCellKey","hasDied","includes","filter","p","id","newOcupiedCells","playableCell","length","keys","key","App","result","gameDispatch","diedPlayers","console","log","handleKeyPress","event","keyCode","handleStart","handleRestart","document","addEventListener","cleanUp","removeEventListener","winningPlayers","join"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer} from 'react';\nimport Board from 'components/Board';\nimport Result from 'components/Result';\nimport Start from 'components/Start';\nimport {\n  BOARD_SIZE,\n  GAME_ENDED,\n  GAME_PLAYING,\n  GAME_READY,\n  PLAYER_ONE,\n  PLAYER_TWO,\n  UNIT\n} from 'config/const';\nimport useInterval from 'hooks/useInterval';\nimport getCellKey from 'utils/getCellKey';\nimport getPlayableCells from 'utils/getPlayableCells';\nimport playerCanChangeToDirection from 'utils/playerCanChangeToDirection';\nimport sumCoordinates from 'utils/sumCoordinates';\nimport './App.css';\n\nconst players = [PLAYER_ONE, PLAYER_TWO];\n\nconst initialState = {\n  players,\n  playableCells: getPlayableCells(\n    BOARD_SIZE,\n    UNIT,\n    players.map((player) => getCellKey(player.position.x, player.position.y))\n  ),\n  gameStatus: GAME_READY\n};\n\nfunction updateGame(game, action) {\n  if (action.type === 'start') {\n    return {...initialState, gameStatus: GAME_PLAYING};\n  }\n  if (action.type === 'restart') {\n    return {...initialState, gameStatus: GAME_READY};\n  }\n  if (action.type === 'move') {\n    const newPlayers = game.players.map((player) => ({\n      ...player,\n      position: sumCoordinates(player.position, player.direction)\n    }));\n\n    const newPlayersWithCollision = newPlayers.map((player) => {\n      const myCellKey = getCellKey(player.position.x, player.position.y);\n      return {\n        ...player,\n        hasDied:\n          !game.playableCells.includes(myCellKey) ||\n          newPlayers\n            .filter((p) => p.id !== player.id)\n            .map((p) => getCellKey(p.position.x, p.position.y))\n            .includes(myCellKey)\n      };\n    });\n\n    const newOcupiedCells = game.players.map((player) =>\n      getCellKey(player.position.x, player.position.y)\n    );\n\n    const playableCells = game.playableCells.filter((playableCell) => {\n      return !newOcupiedCells.includes(playableCell);\n    });\n\n    return {\n      players: newPlayersWithCollision,\n      playableCells: playableCells,\n      gameStatus:\n        newPlayersWithCollision.filter((player) => player.hasDied).length === 0\n          ? GAME_PLAYING\n          : GAME_ENDED\n    };\n  }\n  if (action.type === 'changeDirection') {\n    const newPlayers = game.players.map((player) => ({\n      ...player,\n      direction:\n        player.keys[action.key] &&\n        playerCanChangeToDirection(player.direction, player.keys[action.key])\n          ? player.keys[action.key]\n          : player.direction\n    }));\n    return {\n      players: newPlayers,\n      playableCells: game.playableCells,\n      gameStatus: game.gameStatus\n    };\n  }\n}\n\nfunction App() {\n  let result = null;\n  const [game, gameDispatch] = useReducer(updateGame, initialState);\n\n  const players = game.players;\n  const diedPlayers = players.filter((player) => player.hasDied);\n  if (diedPlayers.length > 0) {\n    console.log(diedPlayers);\n  }\n\n  useInterval(\n    function () {\n      gameDispatch({type: 'move'});\n    },\n    game.gameStatus !== GAME_PLAYING ? null : 100\n  );\n\n  useEffect(\n    function () {\n      function handleKeyPress(event) {\n        const key = `${event.keyCode}`;\n        if (key === '13') {\n          if (game.gameStatus === GAME_READY) {\n            handleStart();\n          }\n          if (game.gameStatus === GAME_ENDED) {\n            handleRestart();\n          }\n        }\n        gameDispatch({type: 'changeDirection', key});\n      }\n\n      document.addEventListener('keydown', handleKeyPress);\n\n      return function cleanUp() {\n        document.removeEventListener('keydown', handleKeyPress);\n      };\n    },\n    [game.gameStatus]\n  );\n\n  function handleStart() {\n    gameDispatch({type: 'start'});\n  }\n\n  function handleRestart() {\n    gameDispatch({type: 'restart'});\n  }\n\n  if (game.gameStatus === GAME_ENDED) {\n    const winningPlayers = game.players.filter((player) => !player.hasDied);\n    if (winningPlayers.length === 0) {\n      result = 'Empate';\n    } else {\n      result = `Ganador: ${winningPlayers.map((player) => `Jugador ${player.id}`).join(',')}`;\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Board players={game.players} gameStatus={game.gameStatus} />\n      {game.gameStatus === GAME_ENDED && <Result onClick={handleRestart} result={result} />}\n      {game.gameStatus === GAME_READY && <Start onClick={handleStart} />}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}